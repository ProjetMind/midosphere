<?php

namespace Mind\SiteBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * AvisRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AvisRepository extends EntityRepository
{
   
    public function getAvisByAuteur($idAuteur){
        
        $query = $this->_em->createQuery('SELECT a
                                          FROM MindSiteBundle:Avis a 
                                          WHERE a.avisAuteur = :avisAuteur
                                          ORDER BY a.avisDatePublication DESC
                                        ');
        
        $query->setParameter('avisAuteur', $idAuteur);
        
        return $query->getResult();
    }
    
    public function getAvisByNbVote(){
        
        $query = $this->_em->createQuery('SELECT a, COUNT(o.idAvis) as nbVote
                                          FROM MindSiteBundle:Avis a, MindMediaBundle:OpinionAvis o
                                          WHERE a.id = o.idAvis
                                          GROUP BY a.id
                                          ORDER BY nbVote ASC
                                          ');
        
        $result = $query->getResult();
        $queryResult = "";
        
        foreach ($result as $unResult){
            unset($unResult['nbVote']);
            $queryResult[] = $unResult[0];
        }
        
        if(empty($queryResult)){
            return $query->getResult();
        }else{
            return $queryResult;
        }
        
        return $queryResult;
    }
    
    public function getAvisByNbCommentaire(){
        
        $query = $this->_em->createQuery('SELECT a, COUNT(c.idAvis) as nbCom
                                          FROM MindSiteBundle:Avis a, MindCommentaireBundle:CommentaireAvis c
                                          WHERE a.id = c.idAvis
                                          GROUP BY a.id
                                          ORDER BY nbCom ASC
                                          ');
        
        $result = $query->getResult();
        $queryResult = "";
        
        foreach ($result as $unResult){
            unset($unResult['nbCom']);
            $queryResult[] = $unResult[0];
        }
        
        if(empty($queryResult)){
            return $query->getResult();
        }else{
            return $queryResult;
        }
        
        return $queryResult;
    }


    public function getAvisByDomaine($idDuDomaine){
        
        $query = $this->_em->createQuery('SELECT a
                                          FROM MindSiteBundle:Avis a
                                          WHERE a.avisDomaine = :avisDomaine');
        
        $query->setParameter('avisDomaine', $idDuDomaine); 
       
        return $query->getResult();
    }
    
    public function getAvisOrderDatePubDesc(){
        
        $query = $this->_em->createQuery('SELECT a
                                         FROM MindSiteBundle:Avis a
                                         ORDER BY a.avisDatePublication DESC');
       
        return $query->getResult();
    }
    
    public function getAvisOrderDateAsc(){
        
        $query = $this->_em->createQuery('SELECT a
                                         FROM MindSiteBundle:Avis a
                                         ORDER BY a.avisDatePublication ASC');
       
        return $query->getResult();
    }
    
    public function getQuestionOrderDateAsc(){
        
        $query = $this->_em->createQuery('SELECT a
                                         FROM MindSiteBundle:Question a
                                         ORDER BY a.questionDatePublication ASC');
       
        return $query->getResult();
    }
    
    public function findAvisBySlug($slug){
        
        $query = $this->_em->createQuery('SELECT a
                                         FROM MindSiteBundle:Avis a
                                         WHERE a.slug = :slug');
        
        $query->setParameter('slug', $slug);
        
        return $query->getResult();
    }
}
